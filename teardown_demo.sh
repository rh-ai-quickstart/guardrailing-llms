#!/bin/bash

# Generated by Cursor

# Guardrailing LLMs Demo Teardown Script
# This script removes all demo resources from OpenShift

set -e

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Default values
PROJECT="guardrails-demo"
FORCE_DELETE=false
DELETE_PROJECT=false
HELM_RELEASE="guardrailing-llms"

# Function to print colored status messages
print_status() {
    local status=$1
    local message=$2
    case $status in
        "INFO")
            echo -e "${BLUE}ℹ️  $message${NC}"
            ;;
        "SUCCESS")
            echo -e "${GREEN}✅ $message${NC}"
            ;;
        "WARNING")
            echo -e "${YELLOW}⚠️  $message${NC}"
            ;;
        "ERROR")
            echo -e "${RED}❌ $message${NC}"
            ;;
        "CLEANING")
            echo -e "${BLUE}🧹 $message${NC}"
            ;;
    esac
}

# Function to show usage
show_usage() {
    echo "Usage: $0 [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  -p, --project PROJECT     OpenShift project/namespace (default: guardrails-demo)"
    echo "  -f, --force              Force deletion without confirmation"
    echo "  --delete-project         Also delete the entire project/namespace"
    echo "  -h, --help               Show this help message"
    echo ""
    echo "Examples:"
    echo "  $0                                    # Remove demo resources from guardrails-demo"
    echo "  $0 -p my-demo                        # Remove demo resources from my-demo project"
    echo "  $0 --delete-project                  # Remove demo resources and delete project"
    echo "  $0 -f --delete-project               # Force delete everything without confirmation"
}

# Function to parse command line arguments
parse_arguments() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            -p|--project)
                PROJECT="$2"
                shift 2
                ;;
            -f|--force)
                FORCE_DELETE=true
                shift
                ;;
            --delete-project)
                DELETE_PROJECT=true
                shift
                ;;
            -h|--help)
                show_usage
                exit 0
                ;;
            *)
                print_status "ERROR" "Unknown option: $1"
                show_usage
                exit 1
                ;;
        esac
    done
}

# Function to check if project exists
check_project_exists() {
    if oc get project "$PROJECT" >/dev/null 2>&1; then
        return 0
    else
        return 1
    fi
}

# Function to wait for project deletion
wait_for_project_deletion() {
    local project=$1
    local timeout=300  # 5 minutes
    local count=0

    print_status "INFO" "Waiting for project '$project' to be fully deleted..."

    while [ $count -lt $timeout ]; do
        if ! oc get project "$project" >/dev/null 2>&1; then
            print_status "SUCCESS" "Project '$project' has been deleted"
            return 0
        fi

        echo -n "."
        sleep 5
        count=$((count + 5))
    done

    print_status "WARNING" "Project deletion timed out after ${timeout}s"
    return 1
}

# Function to confirm deletion
confirm_deletion() {
    if [ "$FORCE_DELETE" = true ]; then
        return 0
    fi

    echo ""
    print_status "WARNING" "This will remove all Guardrailing LLMs demo resources"
    if [ "$DELETE_PROJECT" = true ]; then
        print_status "WARNING" "This will also DELETE the entire project: $PROJECT"
    else
        print_status "INFO" "Project '$PROJECT' will be preserved"
    fi
    echo ""

    read -p "Are you sure you want to continue? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        print_status "INFO" "Teardown cancelled by user"
        exit 0
    fi
}

# Function to check prerequisites
check_prerequisites() {
    print_status "INFO" "Checking prerequisites..."

    # Check if oc is available
    if ! command -v oc >/dev/null 2>&1; then
        print_status "ERROR" "OpenShift CLI (oc) is not installed or not in PATH"
        exit 1
    fi

    # Check if helm is available
    if ! command -v helm >/dev/null 2>&1; then
        print_status "ERROR" "Helm is not installed or not in PATH"
        exit 1
    fi

    # Check if logged in to OpenShift
    if ! oc whoami >/dev/null 2>&1; then
        print_status "ERROR" "Not logged in to OpenShift. Please run 'oc login' first"
        exit 1
    fi

    print_status "SUCCESS" "Prerequisites check passed"
}

# Function to remove Helm release
remove_helm_release() {
    print_status "CLEANING" "Removing Helm release '$HELM_RELEASE' from project '$PROJECT'..."

    if helm list -n "$PROJECT" | grep -q "$HELM_RELEASE"; then
        if helm uninstall "$HELM_RELEASE" -n "$PROJECT" 2>/dev/null; then
            print_status "SUCCESS" "Helm release '$HELM_RELEASE' removed"
        else
            print_status "WARNING" "Failed to remove Helm release '$HELM_RELEASE'"
        fi
    else
        print_status "INFO" "Helm release '$HELM_RELEASE' not found in project '$PROJECT'"
    fi
}

# Function to remove InferenceServices
remove_inference_services() {
    print_status "CLEANING" "Removing InferenceServices from project '$PROJECT'..."

    local inference_services=(
        "gibberish-detector"
        "prompt-injection-detector"
        "ibm-hate-and-profanity-detector"
        "llama-32-3b-instruct"
    )

    for isvc in "${inference_services[@]}"; do
        if oc get inferenceservice "$isvc" -n "$PROJECT" >/dev/null 2>&1; then
            print_status "INFO" "Removing InferenceService: $isvc"
            if oc delete inferenceservice "$isvc" -n "$PROJECT" --ignore-not-found=true; then
                print_status "SUCCESS" "InferenceService '$isvc' removed"
            else
                print_status "WARNING" "Failed to remove InferenceService '$isvc'"
            fi
        else
            print_status "INFO" "InferenceService '$isvc' not found"
        fi
    done
}

# Function to remove remaining resources
remove_remaining_resources() {
    print_status "CLEANING" "Removing remaining resources from project '$PROJECT'..."

    # Remove routes
    print_status "INFO" "Removing routes..."
    oc delete route --all -n "$PROJECT" --ignore-not-found=true

    # Remove services
    print_status "INFO" "Removing services..."
    oc delete service --all -n "$PROJECT" --ignore-not-found=true

    # Remove deployments
    print_status "INFO" "Removing deployments..."
    oc delete deployment --all -n "$PROJECT" --ignore-not-found=true

    # Remove statefulsets
    print_status "INFO" "Removing statefulsets..."
    oc delete statefulset --all -n "$PROJECT" --ignore-not-found=true

    # Remove jobs
    print_status "INFO" "Removing jobs..."
    oc delete job --all -n "$PROJECT" --ignore-not-found=true

    # Remove HPA
    print_status "INFO" "Removing horizontal pod autoscalers..."
    oc delete hpa --all -n "$PROJECT" --ignore-not-found=true

    # Remove pods (in case some are stuck)
    print_status "INFO" "Removing remaining pods..."
    oc delete pod --all -n "$PROJECT" --ignore-not-found=true

    # Remove PVCs
    print_status "INFO" "Removing persistent volume claims..."
    oc delete pvc --all -n "$PROJECT" --ignore-not-found=true

    # Remove configmaps
    print_status "INFO" "Removing configmaps..."
    oc delete configmap --all -n "$PROJECT" --ignore-not-found=true

    # Remove secrets
    print_status "INFO" "Removing secrets..."
    oc delete secret --all -n "$PROJECT" --ignore-not-found=true

    print_status "SUCCESS" "Remaining resources cleaned up"
}

# Function to wait for resources to be deleted
wait_for_resource_cleanup() {
    print_status "INFO" "Waiting for resources to be fully deleted..."

    local timeout=120  # 2 minutes
    local count=0

    while [ $count -lt $timeout ]; do
        local pod_count
        pod_count=$(oc get pods -n "$PROJECT" --no-headers 2>/dev/null | wc -l || echo "0")
        local svc_count
        svc_count=$(oc get services -n "$PROJECT" --no-headers 2>/dev/null | wc -l || echo "0")
        local route_count
        route_count=$(oc get routes -n "$PROJECT" --no-headers 2>/dev/null | wc -l || echo "0")

        if [ "$pod_count" -eq 0 ] && [ "$svc_count" -eq 0 ] && [ "$route_count" -eq 0 ]; then
            print_status "SUCCESS" "All resources have been deleted"
            return 0
        fi

        echo -n "."
        sleep 5
        count=$((count + 5))
    done

    print_status "WARNING" "Some resources may still be terminating"
}

# Function to delete project
delete_project() {
    if [ "$DELETE_PROJECT" = true ]; then
        print_status "CLEANING" "Deleting project '$PROJECT'..."

        if oc delete project "$PROJECT" --ignore-not-found=true; then
            print_status "SUCCESS" "Project '$PROJECT' deletion initiated"
            wait_for_project_deletion "$PROJECT"
        else
            print_status "WARNING" "Failed to delete project '$PROJECT'"
        fi
    fi
}

# Function to show final status
show_final_status() {
    echo ""
    print_status "INFO" "Teardown Summary:"
    echo "  - Project: $PROJECT"
    echo "  - Helm release removed: $HELM_RELEASE"
    echo "  - InferenceServices removed: 4"
    echo "  - All demo resources cleaned up"

    if [ "$DELETE_PROJECT" = true ]; then
        echo "  - Project deleted: $PROJECT"
    else
        echo "  - Project preserved: $PROJECT"
    fi

    echo ""
    print_status "SUCCESS" "Guardrailing LLMs demo teardown completed!"
}

# Main execution
main() {
    echo "=========================================="
    echo "Guardrailing LLMs Demo Teardown Script"
    echo "=========================================="
    echo ""

    # Parse command line arguments
    parse_arguments "$@"

    # Check prerequisites
    check_prerequisites

    # Check if project exists
    if ! check_project_exists; then
        print_status "WARNING" "Project '$PROJECT' does not exist"
        exit 0
    fi

    # Confirm deletion
    confirm_deletion

    # Remove Helm release first (this should remove most resources)
    remove_helm_release

    # Remove InferenceServices
    remove_inference_services

    # Remove any remaining resources
    remove_remaining_resources

    # Wait for cleanup to complete
    wait_for_resource_cleanup

    # Delete project if requested
    delete_project

    # Show final status
    show_final_status
}

# Run main function with all arguments
main "$@"
